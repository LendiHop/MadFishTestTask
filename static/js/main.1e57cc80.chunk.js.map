{"version":3,"sources":["m1-ui/n2-components/input/MyInput.tsx","m1-ui/n2-components/button/MyButton.tsx","m3-dal/tezos.ts","m2-bll/app-reduser.ts","m1-ui/n2-components/ListItem.tsx","m1-ui/n2-components/List.tsx","m1-ui/n1-app/App.tsx","m2-bll/store.ts","m0-utils/localstorage-utils.ts","index.tsx","m1-ui/n2-components/input/MyInput.module.css","m1-ui/n2-components/button/MyButton.module.css"],"names":["MyInput","React","forwardRef","props","ref","className","classes","myInput","MyButton","children","myBtn","Tezos","TezosToolkit","initialState","list","ListItem","id","address","balance","dispatch","useDispatch","style","textAlign","padding","onClick","type","removeItem","List","useSelector","state","app","length","map","item","App","inputRef","useRef","placeholder","current","value","tz","getBalance","then","addItem","toNumber","catch","error","console","log","JSON","stringify","reducers","combineReducers","action","newItem","Date","now","toString","filter","store","createStore","serializedState","localStorage","getItem","parse","err","loadState","composeWithDevTools","applyMiddleware","thunk","subscribe","setItem","saveState","getState","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1e57cc80.chunk.js","sourcesContent":["import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\nimport classes from './MyInput.module.css';\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\nconst MyInput = React.forwardRef<HTMLInputElement, DefaultInputPropsType>((props, ref) => {\r\n    return (\r\n        <input ref={ref} className={classes.myInput} {...props}/>\r\n    );\r\n});\r\n\r\nexport default MyInput;","import React, {ButtonHTMLAttributes, DetailedHTMLProps } from 'react';\r\nimport classes from './MyButton.module.css';\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\nconst MyButton: React.FC<DefaultButtonPropsType> = ({children, ...props}) => {\r\n    return (\r\n        <button className={classes.myBtn} {...props}>\r\n            {children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default MyButton;","import { TezosToolkit } from '@taquito/taquito';\r\n\r\nexport const Tezos = new TezosToolkit('https://mainnet-node.madfish.solutions');","import {Dispatch} from \"redux\"\r\nimport {Tezos} from \"../m3-dal/tezos\";\r\n\r\nconst initialState: AppInitialStateType = {list: []};\r\n\r\nexport type ListItemType = {\r\n    id: string\r\n    address: string\r\n    balance: number\r\n}\r\n\r\nexport type AppInitialStateType = {list: Array<ListItemType>}\r\n\r\nexport const appReducer = (state: AppInitialStateType = initialState, action: AppActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/ADD-ITEM':\r\n            const newItem = {\r\n                id: Date.now().toString(),\r\n                ...action.item\r\n            }\r\n            return {...state, list: [...state.list, newItem]};\r\n        case 'APP/REMOVE-ITEM':\r\n            return {...state, list: state.list.filter(item => item.id !== action.id)};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addItem = (address: string, balance: number) => ({type: 'APP/ADD-ITEM', item: {address, balance}} as const);\r\nexport const removeItem = (id: string) => ({type: 'APP/REMOVE-ITEM', id} as const);\r\n\r\nexport const getBalance = (address: string) => (dispatch: Dispatch) => {\r\n    Tezos.tz\r\n        .getBalance(address)\r\n        .then(balance => dispatch(addItem(address, balance.toNumber() / 1000000)))\r\n        .catch(error => console.log(JSON.stringify(error)));\r\n};\r\n\r\nexport type AppActionsType = ReturnType<typeof addItem> | ReturnType<typeof removeItem>","import React from 'react';\r\nimport MyButton from './button/MyButton';\r\nimport {ListItemType, removeItem} from \"../../m2-bll/app-reduser\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst ListItem: React.FC<ListItemType> = ({id, address, balance}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(removeItem(id));\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{address}</td>\r\n            <td style={{textAlign: \"center\"}}>{balance} êœ©</td>\r\n            <td style={{textAlign: \"center\", padding: 0}}><MyButton onClick={deleteHandler} className=\"item__btn\">X</MyButton></td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from '../../m2-bll/store';\r\nimport {ListItemType} from \"../../m2-bll/app-reduser\";\r\nimport ListItem from \"./ListItem\";\r\n\r\nconst List: React.FC = () => {\r\n    const list = useSelector<AppRootStateType, Array<ListItemType>>(state => state.app.list);\r\n\r\n    if (!list.length) {\r\n        return (\r\n            <h2 style={{textAlign: 'center'}}>\r\n                The list is currently empty :(\r\n            </h2>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <table>\r\n            {list.map((item) =><ListItem id={item.id} address={item.address} balance={item.balance}/>)}\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default List;","import React, {useRef} from 'react';\nimport './App.css';\nimport MyInput from \"../n2-components/input/MyInput\";\nimport MyButton from \"../n2-components/button/MyButton\";\nimport List from \"../n2-components/List\";\nimport {useDispatch} from \"react-redux\";\nimport {getBalance} from \"../../m2-bll/app-reduser\";\n\nfunction App() {\n    const dispatch = useDispatch();\n\n    const addHandler = () => {\n        if(inputRef.current) {\n            dispatch(getBalance(inputRef.current.value));\n            inputRef.current.value = '';\n        }\n    }\n\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    return (\n        <div className=\"App\">\n            <h1>MadFish Test Task</h1>\n            <div className=\"row-container\">\n                <MyInput ref={inputRef} placeholder=\"Enter your pkh here...\"/>\n                <MyButton onClick={addHandler}>\n                    Add\n                </MyButton>\n            </div>\n            <List/>\n        </div>\n    );\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reduser\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {loadState, saveState} from \"../m0-utils/localstorage-utils\";\r\n\r\nconst reducers = combineReducers({\r\n    app: appReducer,\r\n});\r\n\r\nconst store = createStore(reducers, loadState(), composeWithDevTools(\r\n    applyMiddleware(thunk)));\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        app: store.getState().app\r\n    })\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\nexport default store;","import {AppRootStateType} from \"../m2-bll/store\";\n\nexport const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('app-state');\n        if (serializedState === null) {\n            return undefined;\n        }\n        return JSON.parse(serializedState);\n    } catch (err) {\n        return undefined;\n    }\n};\n\n\nexport const saveState = (state: AppRootStateType) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('app-state', serializedState);\n    } catch {\n        // ignore write errors\n    }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './m1-ui/n1-app/App';\nimport {Provider} from \"react-redux\";\nimport store from \"./m2-bll/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myInput\":\"MyInput_myInput__1uUYk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myBtn\":\"MyButton_myBtn__3499n\"};"],"sourceRoot":""}